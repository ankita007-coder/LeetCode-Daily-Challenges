## Iterative

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:           
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res,stack = [],[]
        curr = root
        while True:
            if curr!=None:
                stack.append(curr)
                curr = curr.left
            elif stack:
                curr = stack.pop()
                res.append(curr.val)
                curr = curr.right
            else:
                break
        return res

# Recursive
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:           
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        self.helper(root,res)
        return res
    def helper(self,root,res):
        if root!=None:
            self.helper(root.left,res)
            res.append(root.val)
            self.helper(root.right,res)
