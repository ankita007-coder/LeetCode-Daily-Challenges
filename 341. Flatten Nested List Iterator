#recursive code
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.flattened = self.flatten(nestedList)
        self.index = 0
    def flatten(self,nestedList):
        result = []
        for i in nestedList:
            if i.isInteger():
                result.append(i.getInteger())
            else:
                result.extend(self.flatten(i.getList()))
        return result
    
    def next(self) -> int:
        self.index+=1
        return self.flattened[self.index-1]
    
    def hasNext(self) -> bool:
        return self.index<len(self.flattened)

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())

#Stack Code
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.stack = nestedList[::-1]
    
    def next(self) -> int:
        return self.stack.pop().getInteger()
    
    def hasNext(self) -> bool:
        while self.stack:
            if self.stack[-1].isInteger():
                return True
            self.stack = self.stack[:-1]+ self.stack[-1].getList()[::-1]
        return False

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())
```
