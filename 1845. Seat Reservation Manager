#Approach 1
class SeatManager:

    def __init__(self, n: int):
        self.seat = [1]*n

    def reserve(self) -> int:
        for i in range(len(self.seat)):
            if self.seat[i]==1:
                self.seat[i]=0
                return i+1

    def unreserve(self, seatNumber: int) -> None:
        self.seat[seatNumber-1]=1


# Your SeatManager object will be instantiated and called as such:
# obj = SeatManager(n)
# param_1 = obj.reserve()
# obj.unreserve(seatNumber)

#Approach 2
import heapq
class SeatManager:

    def __init__(self, n: int):
        self.seat = list(range(1,n+1))
        heapq.heapify(self.seat)

    def reserve(self) -> int:
        if self.seat:
            return heapq.heappop(self.seat)
        return -1

    def unreserve(self, seatNumber: int) -> None:
        heapq.heappush(self.seat,seatNumber)
        


# Your SeatManager object will be instantiated and called as such:
# obj = SeatManager(n)
# param_1 = obj.reserve()
# obj.unreserve(seatNumber)
