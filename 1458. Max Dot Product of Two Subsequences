class Solution:
    #recursion
    # def helper(self,nums1,nums2,i,j):
    #     if (j==len(nums2) or i==len(nums1)):
    #         return float('-inf')
    #     res = float('-inf')
    #     prod = nums1[i]*nums2[j]
    #     res = max(res,max(self.helper(nums1,nums2,i+1,j+1),0)+prod)
    #     res =  max(res,self.helper(nums1,nums2,i,j+1))
    #     res= max(res,self.helper(nums1,nums2,i+1,j))
    #     return res

    #memoization
    # def helper(self,nums1,nums2,i,j,dp):
    #     if (j==len(nums2) or i==len(nums1)):
    #         return float('-inf')
    #     if dp[i][j]!=-1:
    #         return dp[i][j]
    #     res = float('-inf')
    #     prod = nums1[i]*nums2[j]
    #     res = max(res,max(self.helper(nums1,nums2,i+1,j+1,dp),0)+prod)
    #     res =  max(res,self.helper(nums1,nums2,i,j+1,dp))
    #     res= max(res,self.helper(nums1,nums2,i+1,j,dp))
    #     dp[i][j]= res
    #     return dp[i][j]

    #tabulation
    def helper(self,nums1,nums2,dp):
        n = len(nums1)
        m = len(nums2)
        for i in range(n+1):
            dp[i][0]= float('-inf')
        for i in range(m+1):
            dp[0][i]=float('-inf')
        for i in range(1,n+1):
            for j in range(1,m+1):
                prod = nums1[i-1]*nums2[j-1]
                dp[i][j] = max(dp[i-1][j-1]+prod,dp[i][j-1],dp[i-1][j], prod)
        return dp[i][j]


    def maxDotProduct(self, nums1, nums2):
        dp = [[-1 for _ in range(len(nums2) + 1)] for _ in range(len(nums1) + 1)]
        return self.helper(nums1, nums2, dp)
