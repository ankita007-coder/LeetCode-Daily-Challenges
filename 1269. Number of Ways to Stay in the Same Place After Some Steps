class Solution:
    def helper(self,step, position,arrLen):
        #recursion
        mod = 10**9+7
        if position <0 or position>=arrLen:
            return 0
        if step == 0:
            return 1 if position == 0 else 0

        # Calculate the number of ways recursively
        ways = 0
        
        ways = (ways+self.helper(step - 1, position - 1,arrLen))%mod
        ways = (ways+self.helper(step - 1, position,arrLen))%mod
        ways = (ways+self.helper(step - 1, position + 1,arrLen))%mod


        return ways

        

    def numWays(self, steps: int, arrLen: int) -> int:
        return self.helper(steps,0,arrLen)
        #tabulation
        # n = min(steps//2+1,arrLen)
        # m= steps
        # dp = [[0]*n for i in range(m+1)]
        # dp[0][0]=1
        # mod = 10**9+7
        # for i in range(1,m+1):
        #     for j in range(n):
        #         dp[i][j]=dp[i-1][j]
        #         if j>0:
        #             dp[i][j] +=dp[i-1][j-1]
        #         if j<n-1:
        #             dp[i][j]+=dp[i-1][j+1]
        # return dp[m][0]%mod

        
