# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The intuition behind the problem is that the nth row of the Pascal's Triangle can be calculated from the (n - 1)th row of the Pascal's Triangle by adding the corresponding elements in the two rows.

The first two solutions that you provided are recursive solutions. The recursive solution works by recursively calculating the nth row of the Pascal's Triangle, based on the following two rules:

The first and last elements of the nth row are always 1.
The elements in the middle of the nth row are the sum of the corresponding elements in the (n - 1)th row.

# Approach
<!-- Describe your approach to solving the problem. -->
The approach to the Pascal's Triangle II problem is to use dynamic programming. Dynamic programming is a technique for solving problems by breaking them down into smaller subproblems and then solving those subproblems recursively. The results of the subproblems are stored in a table, which is then used to solve the larger problem.

# Complexity
1. Approach 1: Iterative with 2D List

- Time Complexity (TC): O(rowIndex^2)
 - Space Complexity (SC): O(rowIndex^2)

2. Approach 2: Iterative with 1D List

- Time Complexity (TC): O(rowIndex^2)
- Space Complexity (SC): O(rowIndex)

3. Approach 3: Combinatorics Approach (Using Binomial Coefficients)

- Time Complexity (TC): O(rowIndex)
- Space Complexity (SC): O(rowIndex)

# Code
# Brute Approach
```
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        prev = [1]
        curr = []
        for i in range(1,rowIndex+1):
            for j in range(0,len(prev)+1):
                if j==0 or j==len(prev):
                    curr.append(1)
                else:
                    curr.append(prev[j-1]+prev[j])
            prev = curr
            curr = []
        return prev
```

# Optimized Approach
```
class Solution:
    def getRow(self, rowIndex: int):
        if rowIndex == 0:
            return [1]
        
        # Initialize a 2D array with the first two rows of Pascal's Triangle
        pascal_triangle = [[1], [1, 1]]

        for i in range(2, rowIndex+1):
            currentRow = [1]  # The first element of each row is 1
            for j in range(1, i):
                # Calculate and append the middle elements of the row
                currentRow.append(pascal_triangle[i - 1][j - 1] + pascal_triangle[i - 1][j])
            currentRow.append(1)  # The last element of each row is 1

            pascal_triangle.append(currentRow)

        return pascal_triangle[rowIndex]
```

# Combinatorics
```
class Solution:
    def getRow(self, rowIndex: int):
        row = [1] * (rowIndex + 1)
        for k in range(1, rowIndex // 2 + 1):
            row[k] = row[rowIndex - k] = row[k - 1] * (rowIndex - k + 1) // k
        return row

```

Please upvote if you understood the solution.
