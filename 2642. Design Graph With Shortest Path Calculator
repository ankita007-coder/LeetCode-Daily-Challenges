# class Graph:

#     def __init__(self, n: int, edges: List[List[int]]):
#         self.graph = {i: [] for i in range(n)}
#         self.add_edges(edges)

#     def add_edges(self, edges):
#         for from_node, to_node, cost in edges:
#             self.graph[from_node].append((to_node, cost))

#     def addEdge(self, edge: List[int]) -> None:
#         from_node, to_node, cost = edge
#         self.graph[from_node].append((to_node, cost))

#     def shortestPath(self, node1: int, node2: int) -> int:
#         # Initialization
#         distance = {node: float('inf') for node in self.graph}
#         distance[node1] = 0
#         visited = set()

#         while node1 not in visited:
#             visited.add(node1)

#             for neighbor, edge_cost in self.graph[node1]:
#                 new_cost = distance[node1] + edge_cost
#                 if new_cost < distance[neighbor]:
#                     distance[neighbor] = new_cost

#             # Find the next node with the minimum cost
#             next_node = min((node for node in distance if node not in visited), key=distance.get, default=None)

#             if next_node is None:
#                 break

#             node1 = next_node

#         return distance[node2] if distance[node2] != float('inf') else -1

import heapq

class Graph:
    def __init__(self, n, edges):
        self.n = n
        self.graph = {i: [] for i in range(n)}
        for from_node, to_node, cost in edges:
            self.graph[from_node].append((to_node, cost))

    def addEdge(self, edge):
        from_node, to_node, cost = edge
        self.graph[from_node].append((to_node, cost))

    def shortestPath(self, node1, node2):
        # Dijkstra's algorithm
        heap = [(0, node1)]  # (cost, node)
        visited = set()

        while heap:
            current_cost, current_node = heapq.heappop(heap)

            if current_node in visited:
                continue

            visited.add(current_node)

            if current_node == node2:
                return current_cost

            for neighbor, edge_cost in self.graph[current_node]:
                if neighbor not in visited:
                    heapq.heappush(heap, (current_cost + edge_cost, neighbor))

        return -1  # No path found





# # Your Graph object will be instantiated and called as such:
# # obj = Graph(n, edges)
# # obj.addEdge(edge)
# # param_2 = obj.shortestPath(node1,node2)
