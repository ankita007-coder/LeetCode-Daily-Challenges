class Solution:
    def binary_Search(self, nums, target, isSearch):
        l = 0
        r = len(nums)-1
        idx = -1
        while l<=r:
            mid = (l+r)//2
            if nums[mid]==target:
                idx = mid
                if isSearch:
                    r = mid-1
                else:
                    l = mid+1
            elif nums[mid]<target:
                l = mid+1
            else:
                r = mid-1
        return idx


    def searchRange(self, nums: List[int], target: int) -> List[int]:
        left = self.binary_Search(nums, target, True)
        right = self.binary_Search(nums, target, False)
        return [left,right]

    #Linear Search
    # def searchRange(self, nums: List[int], target: int) -> List[int]:
    #     left = -1
    #     right=-1
    #     for i in range(len(nums)):
    #         if nums[i]==target:
    #             if left==-1:
    #                 left = i
    #             right = i
    #     return [left,right]

    #Linear Search with two loops
    # def searchRange(self, nums: List[int], target: int) -> List[int]:
    #     left =-1
    #     right = -1
    #     for i in range(len(nums)):
    #         if nums[i]==target:
    #             left=i
    #             break
    #     for i in range(len(nums)-1,-1,-1):
    #         if nums[i]==target:
    #             right=i
    #             break
    #     return [left,right]
